from typing import Iterator, TypeVar
DefaultT = TypeVar("DefaultT")

class LexborAttributes:
    @staticmethod
    def create(node: "LexborAttributes") -> "LexborAttributes":...
    def keys(self) -> Iterator[str]: ...
    def items(self) -> Iterator[tuple[str,str]]: ...
    def values(self) -> Iterator[str]: ...
    def get(self, key: str, default: DefaultT=None) -> str|DefaultT: ...
    def sget(self, key:str, default: DefaultT="") -> str|DefaultT: ...

class LexborSelector:
    def __init__(self, node: LexborNode, query: str): ...
    def css(self, query:str): ...
    @property
    def matches(self) -> list[LexborNode]: ...
    @property
    def any_matches(self) -> bool: ...
    def text_contains(self, text: str, deep:bool=True, separator:str='', strip:bool=False) -> "LexborSelector": ...
    def any_text_contains(self, text:str, deep:bool=True, separator:str='', strip:bool=False) -> bool: ...
    def attribute_longer_than(self, attribute: str, length: int, start: str|None=None) -> "LexborSelector": ...
    def any_attribute_longer_than(self, attribute:str, length: int, start:str|None=None) -> bool: ...

class LexborCSSSelector:
    def __init__(self): ...
    def _create_css_parser(self): ...
    def find(self, query:str, node: "LexborNode") -> list["LexborNode"]: ...
    def any_matches(self, query: str, node: "LexborNode") -> bool: ...


class LexborNode: 
    @property
    def child(self) -> None|"LexborNode": ...
    @property
    def first_child(self) -> None|"LexborNode": ...
    @property
    def parent(self) -> None|"LexborNode": ...
    @property
    def next(self) -> None|"LexborNode": ...
    @property
    def prev(self) -> None|"LexborNode": ...
    @property
    def last_child(self) -> None|"LexborNode": ...
    @property
    def html(self) -> str|None: ...
    def text_lexbor(self) -> str: ...
    def text(self, deep:bool=True, separator:str='', strip:bool=False) -> str: ...
    def css(self, query:str) -> list["LexborNode"]: ...
    def css_first(self, query:str, default:DefaultT=None, strict:bool=False) -> "LexborNode"|DefaultT: ...
    def any_css_matches(self, selectors: tuple[str]) -> bool: ...
    def css_matches(self, selector: str) -> bool: ...
    @property
    def tag_id(self) -> int: ...
    @property
    def tag(self) -> str: ...
    def decompose(self, recursive:bool=True) -> None: ...
    def strip_tags(self, tags:list[str], recursive: bool=False) -> None: ...
    @property
    def attributes(self) -> dict[str, str|None]: ...
    @property
    def attrs(self) -> "LexborAttributes": ...
    @property
    def id(self) -> None|str: ...
    def iter(self, include_text:bool=False) -> Iterator["LexborNode"]: ...
    def unwrap(self) -> None: ...
    def unwrap_tags(self, tags: list[str]) -> None: ...
    def traverse(self, indluce_text:bool=False) -> Iterator["LexborNode"]: ...
    def replace_with(self, value: bytes|str|"LexborNode") -> None: ...
    def insert_before(self, value: bytes|str|"LexborNode") -> None: ...
    def insert_after(self, value: bytes|str|"LexborNode") -> None: ...
    @property
    def raw_value(self) -> bytes: ...
    def scripts_contain(self, query: str) -> bool: ...
    def scripts_srcs_contain(self, queries: tuple[str]) -> bool: ...
    def remove(self, recursive: bool=True) -> None: ...
    def select(self, query: str|None=None) -> "LexborSelector": ...




class LexborHTMLParser:
    def __init__(self, html: str): ...
    @property
    def selector(self) -> None | "LexborCSSSelector": ...
    @property
    def root(self) -> "LexborNode": ...
    @property
    def body(self) -> "LexborNode"|None: ...
    @property
    def head(self) -> None|"LexborNode": ...
    def tags(self, name: str) -> list["LexborNode"]: ...
    def text(self, deep: bool=True, separator: str='', strip: bool=False) -> str: ...
    @property
    def html(self) -> None|str: ...
    def css(self, query: str) -> list["LexborNode"]: ...
    def css_first(self, query:str, default:DefaultT=None, strict:bool=False) -> "LexborNode"|DefaultT: ...
    def strip_tags(self, tags: list[str], recursive: bool=False) -> None: ...
    def select(self, query: str|None=None) -> "LexborSelector": ...
    def any_css_matches(self, selectors: tuple[str]) -> bool: ...
    def scripts_contain(self, query: str) -> bool: ...
    def scripts_srcs_contain(self, queries: tuple[str]) -> bool: ...
    def css_matches(self, selector: str) -> bool: ...
    def clone(self) -> "LexborHTMLParser": ...
