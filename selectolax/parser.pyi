from typing import Iterator, TypeVar, Literal
DefaultT = TypeVar("DefaultT")

class _Attributes:
    @staticmethod
    def create(node: "Node", decode_errors: str) -> "_Attributes": ...
    def keys(self) -> Iterator[str]: ...
    def items(self) -> Iterator[tuple[str,str]]: ...
    def values(self) -> Iterator[str]: ...
    def get(self, key, default: DefaultT=None) -> str|DefaultT: ...
    def sget(self, key, default: DefaultT="") -> str|DefaultT: ...


class Selector:
    def __init__(self, node: "Node", query: str): ...
    def css(self, query: str) -> "Node": ...
    @property
    def matches(self) -> list["Node"]: ...
    @property
    def any_matches(self) -> bool: ...
    def text_contains(self, text:str, deep:bool=True, separator:str='', strip:bool=False) -> "Selector": ...
    def any_text_contains(self, text:str, deep:bool=True, separator:str='', strip:bool=False) -> bool: ...
    def attribute_long_than(self, text:str, length:int, start:str|None= None) -> "Selector": ...
    def any_attribute_long_than(self, text:str, length:int, start:str|None= None) -> bool: ...



class Node:
    @property
    def attributes(self) -> dict[str, None|str]: ...
    @property
    def attrs(self) -> "_Attributes": ...
    @property
    def id(self) -> str|None: ...
    def text(self, deep:bool=True, separator:str="", strip:bool=False) -> str: ...
    def iter(self, include_text:bool=False) -> Iterator["Node"]: ...
    def traverse(self, include_text:bool=False) -> Iterator["Node"]: ...
    @property
    def tag(self) -> str: ...
    @property
    def child(self) -> None|"Node": ...
    @property
    def parent(self) -> None|"Node": ...
    @property
    def next(self) -> None|"Node": ...
    @property
    def prev(self) -> None|"Node": ...
    @property
    def last_child(self) -> None|"Node": ...
    @property
    def html(self) -> None|str: ...
    def css(self, query: str) -> list["Node"]: ...
    def any_css_matches(self, selectors: tuple[str]) -> bool: ...
    def css_matches(self, selector:str) -> bool: ...
    def css_first(self, query:str, default: DefaultT=None, strict: bool=False) -> "Node"|DefaultT: ...
    def decompose(self, recursive:bool=True) -> None: ...
    def remove(self, recursive:bool=True) -> None: ...
    def unwrap(self) -> None: ...
    def strip_tags(self, tags: list[str], recursive: bool=False) -> None: ...
    def unwrap_tags(self, tags: list[str]) -> None: ...
    def replace_with(self, value:str|bytes|None) -> None: ...
    def insert_before(self, value:str|bytes|None) -> None: ...
    def insert_after(self, value:str|bytes|None) -> None: ...
    @property
    def raw_value(self) -> bytes: ...
    def select(self, query:str|None=None) -> "Selector": ...
    def scripts_contain(self, query:str) -> bool: ...
    def script_srcs_contain(self, queries: tuple[str]) -> bool: ...
    


class HTMLParser:
    def __init__(self, html: bytes|str, detect_encoding:bool=True, use_meta_tags: bool=True, decode_errors: Literal["strict", "ignore", "replace"]="ignore"): ...
    def css(self, query:str) -> list["Node"]: ...
    def css_first(self, query:str, default: DefaultT=None, strict:bool=False) -> DefaultT|"Node": ...
    @property
    def input_encoding(self) -> str: ...
    @property
    def root(self) -> "Node"|None:...
    @property
    def head(self) -> "Node"|None: ...
    @property
    def body(self) -> "Node"|None: ...
    def tags(self, name: str) -> list[str]: ...
    def text(self, deep:bool=True, separator: str='', strip:bool=False) -> str: ...
    def strip_tags(self, tags: list[str], recursive: bool=False) -> None: ...
    def unwwrap_tags(self, tags: list[str]) -> None: ...
    @property
    def html(self) -> None|str: ...
    def select(self, query:str|None=None) -> "Selector": ...
    def any_css_matchse(self, selectors: tuple[str]) -> bool: ...
    def scripts_contain(self, query: str) -> bool: ...
    def scripts_srcs_contain(self, queries: tuple[str]) -> bool: ...
    def css_matches(self, selector: str) -> bool: ...
    def clonse(self) -> "HTMLParser": ...
    